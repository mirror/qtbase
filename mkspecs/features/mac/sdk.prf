!host_build:!isEmpty(QMAKE_MAC_SDK) {

    contains(QMAKE_MAC_SDK, .*/.*): \
        error("QMAKE_MAC_SDK can only contain short-form SDK names (eg. macosx, iphoneos)")

    QMAKE_MAC_SDK_INFO = $$system(xcodebuild -sdk $$QMAKE_MAC_SDK -version 2>/dev/null, lines)
    isEmpty(QMAKE_MAC_SDK_INFO): error("Could not resolve SDK \'$$QMAKE_MAC_SDK\'")

    defineReplace(qtMacSDKInfo): \
        return($$replace($$list($$find(QMAKE_MAC_SDK_INFO, ^$$1:)), ^$$1:(.*), \\1))

    !equals(MAKEFILE_GENERATOR, XCODE) {
        sdk_path = $$qtMacSDKInfo(Path)

        QMAKE_CFLAGS += -isysroot $$sdk_path
        QMAKE_OBJECTIVE_CFLAGS += -isysroot $$sdk_path
        QMAKE_CXXFLAGS += -isysroot $$sdk_path
        QMAKE_LFLAGS += -Wl,-syslibroot,$$sdk_path

        !isEmpty(QMAKE_IOS_DEPLOYMENT_TARGET) {
            sdk_settings = $$system(plutil -convert json $$sdk_path/SDKSettings.plist -o -)
            QMAKE_MAC_PLATFORM_NAME = $$replace(sdk_settings, .*PLATFORM_NAME\":\",)
            QMAKE_MAC_PLATFORM_NAME ~= s/\".*$//

            # FIXME: Get the version_min_flag out of the platform's 'Native Build System.xcspec'
            version_identifier = $$replace(QMAKE_MAC_PLATFORM_NAME, iphonesimulator, ios-simulator)
            version_min_flag = -m$${version_identifier}-version-min=$$QMAKE_IOS_DEPLOYMENT_TARGET
            QMAKE_CFLAGS += $$version_min_flag
            QMAKE_CXXFLAGS += $$version_min_flag
            QMAKE_OBJECTIVE_CFLAGS += $$version_min_flag
            QMAKE_LFLAGS += $$version_min_flag
        }
    }
}
